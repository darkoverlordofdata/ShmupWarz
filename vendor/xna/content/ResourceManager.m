#import "ResourceManager.h"
#include <sys/stat.h>   // stat

static BOOL file_exists (char *filename) {
    struct stat   buffer;   
    return (stat (filename, &buffer) == 0);
}
@implementation ResourceManager;

static NSMutableDictionary* _shaders = nil;
static NSMutableDictionary* _textures = nil;

+ (void) initialize {
    if (self == [ResourceManager class]) {
        _shaders = [[NSMutableDictionary alloc] init];
        _textures = [[NSMutableDictionary alloc] init];
    }
}

+ (NSMutableDictionary*)Shaders { return _shaders; }
+ (NSMutableDictionary*)Textures { return _textures; }


+ (Shader*) LoadShader:(NSString*) name 
    Vertex:(NSString*) vertex 
  Fragment:(NSString*) fragment 
{
    [_shaders setObject: [ResourceManager LoadShaderFromFile:vertex Fragment:fragment] forKey: name];
    return [_shaders objectForKey: name];
}

+ (Shader*) GetShader:(NSString*)name 
{
    return [_shaders objectForKey: name];
}

+ (Texture2D*) LoadTexture:(NSString*) name 
       Path:(NSString*) path 
      Alpha:(GLboolean) alpha 
{
    [_textures setObject: [ResourceManager LoadTextureFromFile:path Alpha:alpha] forKey: name];
    return [_shaders objectForKey: name];
}

+ (Texture2D*) GetTexture:(NSString*)name 
{
    return [_textures objectForKey: name];
}

+ (void) Clear 
{
    for (NSString *key in _textures) {
        Texture2D *texture = [_textures objectForKey:key];
        GL.DeleteTextures(1, texture.Id);
    }

    for (NSString *key in _shaders) {
        Shader *shader = [_shaders objectForKey:key];
        GL.DeleteProgram(shader.Id);
    }
}

/**
 * get resource path for filename
 */
+ (NSString*)ResourcePath:(NSString*)filename {

    /**
     * If running from an Application.app folder generated by gmake,
     * then we got it:
     */
    NSString* path = [[NSBundle mainBundle]bundlePath];

    /**
     * Otherwise, it's running from the build folder, 
     * so resources are based on the parent folder
     */
    if (!file_exists([path UTF8String])) {
        path = [path stringByReplacingOccurrencesOfString:@"build/Resources/shmupwarz" withString:@""];
    }
    return path;
}


+ (Shader*) LoadShaderFromFile:(NSString*) vertex 
          Fragment:(NSString*) fragment 
{

    NSString* resourcePath = [self ResourcePath:@"bullet.png"];

    NSArray *vertexArray = [[NSArray alloc] initWithObjects:resourcePath, @"/", vertex, nil];
    NSString *vertexPath = [vertexArray componentsJoinedByString:@""];

    NSString* vertex_str = [[NSString alloc] 
        initWithData:[[NSData alloc]
        initWithContentsOfFile:vertexPath] encoding:NSUTF8StringEncoding];

    NSArray *fragmentArray = [[NSArray alloc] initWithObjects:resourcePath, @"/", fragment, nil];
    NSString *fragmentPath = [fragmentArray componentsJoinedByString:@""];

    NSString* fragment_str = [[NSString alloc] 
        initWithData:[[NSData alloc] 
        initWithContentsOfFile:fragmentPath] encoding:NSUTF8StringEncoding];

    Shader* shader = [[Shader alloc] init];
    [shader Compile:[vertex_str UTF8String] Fragment:[fragment_str UTF8String]];
    return shader;

}

+ (Texture2D*) LoadTextureFromFile:(NSString*) path 
              Alpha:(GLboolean) alpha 
{

    NSString* resourcePath = [self ResourcePath:@"bullet.png"];

    NSArray *imageArray = [[NSArray alloc] initWithObjects:resourcePath, @"/", path, nil];
    NSString *imagePath = [imageArray componentsJoinedByString:@""];

    Texture2D* texture = [[Texture2D alloc] initWithPath:imagePath Alpha:alpha];
    SDL_Surface* surface = IMG_Load([imagePath UTF8String]);
    if (SDL_MUSTLOCK(surface)) 
        SDL_LockSurface(surface);
            
    [texture Generate:(unsigned char*)surface->pixels Width:surface->w Height:surface->h];

    if (SDL_MUSTLOCK(surface)) 
        SDL_UnlockSurface(surface);
    // And finally free image data
    SDL_FreeSurface(surface);
    return texture;
}


@end